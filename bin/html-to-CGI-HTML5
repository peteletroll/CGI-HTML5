#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Std;
$Getopt::Std::STANDARD_HELP_VERSION = 1;

use CGI::HTML5;

sub gethtml($);
sub deparse($);

my $progname = $0;
$progname =~ s/.*\///;

sub VERSION_MESSAGE {
	my ($out, $package, $version, $opts) = @_;
	# print $out "VERSION ", deparse(\@_), "\n";
	print $out "$progname $CGI::HTML5::VERSION - part of CGI::HTML5\n";
}

sub HELP_MESSAGE {
	my ($out, $package, $version, $opts) = @_;
	# print $out "HELP ", deparse(\@_), "\n";
	print $out <<"ENDHELP";
Usage: $progname [ -ah ] [ -u <url> | <file> ... ]
Convert HTML to CGI::HTML5 data tree.
Options:
    -u <url>   get html from url
    -h         reconvert to html via CGI::HTML5
    -a         ASCII output
ENDHELP
}

sub EXIT_MESSAGE {
	my ($out) = @_;
	VERSION_MESSAGE($out);
	HELP_MESSAGE($out);
	my $exit = ($out == \*STDOUT ? 0 : 1);
	# print $out "$progname: exit status $exit\n";
	exit $exit;
}

my %opt = ();
getopts("ahu:", \%opt) or EXIT_MESSAGE(\*STDERR);

my @html = ();

if (exists $opt{u}) {
	push @html, gethtml($opt{u});
}

if (@html) {
	@ARGV and EXIT_MESSAGE(\*STDERR);
} else {
	!@ARGV && -t STDIN and EXIT_MESSAGE(\*STDOUT);
	local $/ = undef;
	push @html, <>;
}

my $tree = CGI::HTML5->parse_html(@html);

binmode \*STDOUT, ":utf8";
if ($opt{h}) {
	my $Q = CGI::HTML5->new();
	$Q->ascii($opt{a});
	my $res = $Q->hs($tree);
	$res =~ s/\s*\z/\n/;
	print $res;
} else {
	print deparse($tree), "\n";
}

exit 0;

sub gethtml($) {
	my ($url) = @_;
	require LWP::UserAgent;
	my $res = LWP::UserAgent->new()->get($url);
	$res->is_success or die "$progname: $url: ", $res->status_line, "\n";
	$res->content_type eq "text/html"
		or die "$progname: $url: unsupported content type ", $res->content_type, "\n";
	$res->decoded_content
}

sub deparse($) {
	my ($tree) = @_;

	if (eval { require Data::Dump; 1 }) {
		return Data::Dump::dump($tree);
	}

	require Data::Dumper;
	my $dumper = Data::Dumper->new([ $tree ]);
	$dumper->Terse(1)->Indent(1)->Useqq(1)->Quotekeys(0)->Sortkeys(1);
	$dumper->Dump()
}

